
/*
 * This file was generated by the SOM Compiler.
 * FileName: maprog.ih.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter EMITIH: 1.59
 */

/*
 * 
 * 
 * 
 *   Module Name: MAPROG (Multiple Argument Program)
 * 
 *   Simple OS/2 Work Place Shell Program
 * 
 */


#ifndef maprog_ih
#define maprog_ih


/*
 * Passthru lines: File: "C.ih", "before"
 */

   #define INCL_WIN
   #define INCL_DOS
   #define INCL_WINSTDDRAG
   #define INCL_DOSSESMGR

   #include <os2.h>

   #define INCL_WPCLASS
   #define INCL_WPFOLDER

   #include <pmwp.h>

   #define ID_TITLE           100       // the title string identifier
   #define ID_ICON            101       // the icon identifier



#include "maprog.h"

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
#define SOM_Scope extern "C"
#else
#define SOM_Scope extern
#endif
#endif

#ifndef SOM_CurrentClass
#define SOM_CurrentClass MAProgCClassData.parentMtab
#endif

#define MAProg_MaxNoMethods 0

/*
 * Instance data
 */
typedef void MAProgData;

/*
 * Trace/Debug macro
 */
#ifndef MAProgMethodDebug
#define MAProgMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * Begin stuff that only goes in the primary file
 */
#ifdef MAProg_Class_Source

/*
 * Current class macros for Instance and Meta classes.
 */
#undef SOMMeta
#define SOMMeta M_MAProgCClassData.parentMtab
#undef SOMInstance
#define SOMInstance MAProgCClassData.parentMtab

#ifndef M_MAProg_Class_Source
#define M_MAProg_Class_Source
#endif    /* M_MAProg_Class_Source */

/*
 * Generate the Apply Stubs.
 */

/*
 * Overridden method: wpDrop
 */
#pragma linkage(maprog_wpDrop, system)
SOM_Scope MRESULT   SOMLINK maprog_wpDrop(MAProg *somSelf,
		HWND hwndCnr,
		PDRAGINFO pdrgInfo,
		PDRAGITEM pdrgItem);
#ifndef parent_wpDrop
static char *somMN_wpDrop = "wpDrop";
static somId somId_wpDrop = &somMN_wpDrop;
#define parent_wpDrop(somSelf,hwndCnr,pdrgInfo,pdrgItem) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpDrop)) \
	 (somSelf,hwndCnr,pdrgInfo,pdrgItem))
#endif
#define MAProgParent_wpDrop parent_wpDrop

/*
 * Temporary class data structure used only in class creation
 */
static somClassDataStructure MAProgtempClassData;

/*
 * Initialize the class data structure
 */
struct MAProgClassDataStructure MAProgClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
struct MAProgCClassDataStructure MAProgCClassData = {(somMethodTab *) NULL};

/*
 * Routines to create the class object
 */

/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t MAProgOM[] = {
    {    &somId_wpDrop,
         (somMethodProc *) maprog_wpDrop    },
};

static void MAProgsomInitializeClass ()
{
	int i;
	somOverrideMethod_t *omp;

/*
 * Override methods.
 */
	for (omp = MAProgOM, i = 0; i < 1; omp++, i++)
	    _somOverrideSMethod (MAProgtempClassData.classObject,
	        *(omp->methodId), omp->method);

}

#pragma linkage(MAProgsomCreateClass, system)
static void SOMLINK MAProgsomCreateClass(SOMClass *pClsObj,
                           SOMClass *mClsObj)
{
    MAProgtempClassData.classObject = _somNew (mClsObj);
    _somInitClass (MAProgtempClassData.classObject,
		"MAProg",
		pClsObj,
		0,
		MAProg_MaxNoMethods,
		MAProg_MajorVersion,
		MAProg_MinorVersion);
    MAProgCClassData.instanceDataToken = 
	_somGetInstanceToken(MAProgtempClassData.classObject);
    MAProgsomInitializeClass();
    MAProgCClassData.parentMtab =
	_somGetPClsMtab(MAProgtempClassData.classObject);
    _somSetClassData(MAProgtempClassData.classObject, (somClassDataStructure *)&MAProgClassData);
    _somClassReady(MAProgtempClassData.classObject);
    /* make newly created class object visible */
    MAProgClassData.classObject = MAProgtempClassData.classObject;
}

MAProg * SOMLINK MAProgNewClass (integer4 scemajorVersion,
		integer4 sceminorVersion)
{
    SOMClass *pClsObj;
    SOMClass *mClsObj;

    /* Check the version numbers */
    if (((scemajorVersion != 0) && 
         (scemajorVersion != MAProg_MajorVersion)) ||
        ((sceminorVersion != 0) && 
         (sceminorVersion > MAProg_MinorVersion))) {
	somPrintf("MAProgNewClass: Error, bad version numbers.\n");
	SOM_Error(SOMERROR_BadVersion);
    }
    /* Don't do anything if class object is already created. */
    if (MAProgClassData.classObject != (SOMAny *) NULL)
	return(MAProgClassData.classObject);

    /* Make sure the environment is initialized. */
    if (SOMClassMgrObject == (SOMAny *) NULL) somEnvironmentNew();
    if (SOMClassMgrObject == (SOMAny *) NULL)
	SOM_Error(SOMERROR_CouldNotStartup);

    /* Get the parent class object. */
    WPProgramNewClass(1,2);	/* static reference */
    pClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("WPProgram"), 1, 2);
    if (pClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoParentClass);

    /* Explicit metaclass, so get it */ 
    M_MAProgNewClass(0,0);	/* static reference */
    mClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("M_MAProg"), 0, 0);
    if (mClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoMetaClass);

    somConstructClass(MAProgsomCreateClass, pClsObj, mClsObj,
		     &MAProgtempClassData);
    return (MAProgClassData.classObject);
}

#endif                   /* MAProg_Class_Source */

#endif       /* maprog_ih */

/*
 * This file was generated by the SOM Compiler.
 * FileName: maprog.ih.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter EMITIH: 1.59
 */

#ifndef maprog_mih
#define maprog_mih


/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
#define SOM_Scope extern "C"
#else
#define SOM_Scope extern
#endif
#endif

#ifndef SOM_CurrentClass
#define SOM_CurrentClass M_MAProgCClassData.parentMtab
#endif

#define M_MAProg_MaxNoMethods 1

/*
 * Instance data
 */
typedef void M_MAProgData;

/*
 * Trace/Debug macro
 */
#ifndef M_MAProgMethodDebug
#define M_MAProgMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * Begin stuff that only goes in the primary file
 */
#ifdef M_MAProg_Class_Source

/*
 * Current class macros for Instance and Meta classes.
 */

/*
 * Generate the Apply Stubs.
 */
#pragma linkage(somAP_clsQueryModuleHandle, system)
static HMODULE   SOMLINK somAP_clsQueryModuleHandle(M_MAProg *somSelf,
		somId __id,
		somId __desc,
		va_list __ap)
{
	__ap; __id; __desc;           /* Referenced to prevent warning msg */

	return (M_MAProg_clsQueryModuleHandle(somSelf));
}


/*
 * Overridden method: wpclsQueryTitle
 */
#pragma linkage(maprogM_wpclsQueryTitle, system)
SOM_Scope PSZ   SOMLINK maprogM_wpclsQueryTitle(M_MAProg *somSelf);
#ifndef parent_wpclsQueryTitle
static char *somMN_wpclsQueryTitle = "wpclsQueryTitle";
static somId somId_wpclsQueryTitle = &somMN_wpclsQueryTitle;
#define parent_wpclsQueryTitle(somSelf) \
	((SOM_ParentResolveE(M_WPObject, SOM_CurrentClass, wpclsQueryTitle)) \
	 (somSelf))
#endif
#define M_MAProgParent_wpclsQueryTitle parent_wpclsQueryTitle

/*
 * Overridden method: wpclsQueryIconData
 */
#pragma linkage(maprogM_wpclsQueryIconData, system)
SOM_Scope ULONG   SOMLINK maprogM_wpclsQueryIconData(M_MAProg *somSelf,
		PICONINFO pIconInfo);
#ifndef parent_wpclsQueryIconData
static char *somMN_wpclsQueryIconData = "wpclsQueryIconData";
static somId somId_wpclsQueryIconData = &somMN_wpclsQueryIconData;
#define parent_wpclsQueryIconData(somSelf,pIconInfo) \
	((SOM_ParentResolveE(M_WPObject, SOM_CurrentClass, wpclsQueryIconData)) \
	 (somSelf,pIconInfo))
#endif
#define M_MAProgParent_wpclsQueryIconData parent_wpclsQueryIconData

/*
 * Temporary class data structure used only in class creation
 */
static somClassDataStructure M_MAProgtempClassData;

/*
 * Initialize the class data structure
 */
struct M_MAProgClassDataStructure M_MAProgClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
struct M_MAProgCClassDataStructure M_MAProgCClassData = {(somMethodTab *) NULL};

/*
 * New Method: clsQueryModuleHandle
 */
#pragma linkage(maprogM_clsQueryModuleHandle, system)
SOM_Scope HMODULE   SOMLINK maprogM_clsQueryModuleHandle(M_MAProg *somSelf);
static char *somMN_clsQueryModuleHandle = "clsQueryModuleHandle";
static somId somId_clsQueryModuleHandle = &somMN_clsQueryModuleHandle;
static char *somDS_clsQueryModuleHandle = somMD_M_MAProg_clsQueryModuleHandle;
static somId somDI_clsQueryModuleHandle = &somDS_clsQueryModuleHandle;
#pragma linkage(somRD_clsQueryModuleHandle, system)
static HMODULE   SOMLINK somRD_clsQueryModuleHandle(M_MAProg *somSelf)
{
	return ((HMODULE) va_somDispatchL(somSelf, somId_clsQueryModuleHandle,
		_somGetMethodDescriptor(SOM_GetClass(somSelf),somId_clsQueryModuleHandle)));
}

/*
 * Routines to create the class object
 */

/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t M_MAProgSM[] = {
    {    &M_MAProgClassData.clsQueryModuleHandle,
         &somId_clsQueryModuleHandle,
         &somDI_clsQueryModuleHandle,
         (somMethodProc *) maprogM_clsQueryModuleHandle,
         (somMethodProc *) somRD_clsQueryModuleHandle,
         (somMethodProc *) somAP_clsQueryModuleHandle    },
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t M_MAProgOM[] = {
    {    &somId_wpclsQueryTitle,
         (somMethodProc *) maprogM_wpclsQueryTitle    },
    {    &somId_wpclsQueryIconData,
         (somMethodProc *) maprogM_wpclsQueryIconData    },
};

static void M_MAProgsomInitializeClass ()
{
	int i;
	somStaticMethod_t *smp;
	somOverrideMethod_t *omp;

/*
 * Add the Static Methods.
 */
	for (smp = M_MAProgSM, i = 0; i < 1; smp++, i++)
	    *(smp->classData) =
	        _somAddStaticMethod (M_MAProgtempClassData.classObject,
	            *(smp->methodId), *(smp->methodDescriptor),
	            smp->method, smp->redispatchStub,
	            smp->applyStub);


/*
 * Override methods.
 */
	for (omp = M_MAProgOM, i = 0; i < 2; omp++, i++)
	    _somOverrideSMethod (M_MAProgtempClassData.classObject,
	        *(omp->methodId), omp->method);

}

#pragma linkage(M_MAProgsomCreateClass, system)
static void SOMLINK M_MAProgsomCreateClass(SOMClass *pClsObj,
                           SOMClass *mClsObj)
{
    M_MAProgtempClassData.classObject = _somNew (mClsObj);
    _somInitClass (M_MAProgtempClassData.classObject,
		"M_MAProg",
		pClsObj,
		0,
		M_MAProg_MaxNoMethods,
		M_MAProg_MajorVersion,
		M_MAProg_MinorVersion);
    M_MAProgCClassData.instanceDataToken = 
	_somGetInstanceToken(M_MAProgtempClassData.classObject);
    M_MAProgsomInitializeClass();
    M_MAProgCClassData.parentMtab =
	_somGetPClsMtab(M_MAProgtempClassData.classObject);
    _somSetClassData(M_MAProgtempClassData.classObject, (somClassDataStructure *)&M_MAProgClassData);
    _somClassReady(M_MAProgtempClassData.classObject);
    /* make newly created class object visible */
    M_MAProgClassData.classObject = M_MAProgtempClassData.classObject;
}

M_MAProg * SOMLINK M_MAProgNewClass (integer4 scemajorVersion,
		integer4 sceminorVersion)
{
    SOMClass *pClsObj;
    SOMClass *mClsObj;

    /* Check the version numbers */
    if (((scemajorVersion != 0) && 
         (scemajorVersion != M_MAProg_MajorVersion)) ||
        ((sceminorVersion != 0) && 
         (sceminorVersion > M_MAProg_MinorVersion))) {
	somPrintf("M_MAProgNewClass: Error, bad version numbers.\n");
	SOM_Error(SOMERROR_BadVersion);
    }
    /* Don't do anything if class object is already created. */
    if (M_MAProgClassData.classObject != (SOMAny *) NULL)
	return(M_MAProgClassData.classObject);

    /* Make sure the environment is initialized. */
    if (SOMClassMgrObject == (SOMAny *) NULL) somEnvironmentNew();
    if (SOMClassMgrObject == (SOMAny *) NULL)
	SOM_Error(SOMERROR_CouldNotStartup);

    /* Get the parent class object. */
    M_WPProgramNewClass(1,2);	/* static reference */
    pClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("M_WPProgram"), 1, 2);
    if (pClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoParentClass);

    /* Use parent's metaclass */ 
    mClsObj = SOM_GetClass(pClsObj);

    somConstructClass(M_MAProgsomCreateClass, pClsObj, mClsObj,
		     &M_MAProgtempClassData);
    return (M_MAProgClassData.classObject);
}

#endif                   /* M_MAProg_Class_Source */

#endif       /* maprog_ih */
